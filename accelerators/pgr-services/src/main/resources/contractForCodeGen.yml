swagger: '2.0'
info:
  version: 1.0.0
  title: DIGIT Public Grievance Redressal(PGR) V2
  description: |
    ### API specs for PGR ###
    Application to Raise Grivances and track the progress.
    . It allows any citizen registered in the system to raise a complaint (based on the   Service definition provided in the master data, Please Refer MDMS service to        Service Definition master) for any ulb belonging to the state.
    . Notifications will be provided on progress of the complaint in evevry step. 
    . Feedback can be provided by the citizen once the complint is resolved.
    . If not satisfied the citizen can reopen the complaint.
  contact:
    name: Egovernments Foundation
    email: contact@egovernments.org
x-module: BPA
x-common-path: 'https://raw.githubusercontent.com/egovernments/municipal-services/common-contract/docs/common-contract-v2-0-0.yml'
paths:
  /requests/_search:
    post:
      summary: Get service requests
      description: |
        Gets the list of service requests for a particular ULB based on search criteria.
      parameters:
        - $ref: 'https://raw.githubusercontent.com/egovernments/municipal-services/common-contract/docs/common-contract-v2-0-0.yml#/components/parameters/tenantId'
        - name: serviceCode
          in: query
          description: Allows search for service type - comma separated list
          schema:
            type: array
            items:
              type: string
              maxItems: 5
        - name: ids
          in: query
          description: Search by list of UUID
          schema:
            type: array
            items:
              type: string
              maxItems: 10
        - name: mobileNo
          in: query
          description: Search by mobile number of service requester
          schema:
            type: string
      responses:
        '202':
          description: Successful response sorted by reverse chrnological order of creation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceResponse'
        '400':
          description: Invalid input.
          content:
            '*/*':
              schema:
                $ref: 'https://raw.githubusercontent.com/egovernments/municipal-services/common-contract/docs/common-contract-v2-0-0.yml#/components/schemas/ErrorRes'
      tags:
        - Service Request
  /requests/_create:
    post:
      summary: Create service requests
      description: Create new service requests - supports batch -  please note that in case of errors entire batch is rejected
      tags:
        - Service Request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRequest'
        description: Request schema.
        required: true
      responses:
        '202':
          description: Application submitted successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceResponse'
        '400':
          description: Failed to process the application
          content:
            '*/*':
              schema:
                $ref: 'https://raw.githubusercontent.com/egovernments/municipal-services/common-contract/docs/common-contract-v2-0-0.yml#/components/schemas/ErrorRes'
  /requests/_update:
    post:
      summary: Update service requests
      description: Updates service request
      tags:
        - Service Request
      responses:
        '202':
          description: Application submitted successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceResponse'
        '400':
          description: Failed to process the application
          content:
            '*/*':
              schema:
                $ref: 'https://raw.githubusercontent.com/egovernments/municipal-services/common-contract/docs/common-contract-v2-0-0.yml#/components/schemas/ErrorRes'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRequest'
        description: Request schema.
        required: true
definitions:
  Workflow:
    type: object
    description: 'BPA application object to capture the details of land, land owners, and address of the land.'
    properties:
      action:
        type: string
        description: Action on the application in certain
        minLength: 1
        maxLength: 64
      assignes:
        type: array
        items:
          type: string
      comments:
        type: string
        description: Unique Identifier scrutinized number
        minLength: 1
        maxLength: 64
      varificationDocuments:
        description: Attach the workflow varification documents.
        type: array
        items:
          $ref: 'https://raw.githubusercontent.com/egovernments/municipal-services/common-contract/docs/common-contract-v2-0-0.yml#/components/schemas/Document'
  Status:
    title: Status
    enum:
      - ACTIVE
      - INACTIVE
    type: string
    description: status of the Property
  ServiceDef:
    type: object
    description: |

      This will be the MDMS data.

      Defines the structure of a service provided by the administration. This is based on Open311 standard, but extends it in follwoing important ways -

      1. metadata is changed from boolean to strign and represents a valid swgger 2.0 definition url of the metadata definition. If this is null then it is assumed taht service does not have any metadata, else the metadata is defined in the OpenAPI definition. This allows for a well structured powerful metadata definition.

      2. Due to this ServiceRequest object has been enhanced to include metadata values (aka attribute value in Open311) as an JSON object.
    properties:
      tenantId:
        type: string
        description: The unique identifier for Service - this is equivalent to jurisdiction_id in Open311. As the platform intends to be multi tenanted - this is always required
        minLength: 2
        maxLength: 50
      serviceCode:
        type: string
        description: The unique identifier for Service
        minLength: 2
        maxLength: 64
      tag:
        type: string
        description: 'tags for this service, we can provide multiple keywords as dot(.) seprated.'
      group:
        type: string
        description: This field we will use to capture department.
      slaHours:
        type: number
        description: Service Level Agreement in hours for Service.
    required:
      - tenantId
      - serviceCode
  Service:
    type: object
    description: |
      Instance of Service request raised for a particular service. As per extension propsed in the Service definition "attributes" carry the input values requried by metadata definition in the structure as described by the corresponding schema.

      * Any one of 'address' or '(lat and lang)' or 'addressid' is mandatory
    properties:
      citizen:
        $ref: 'https://raw.githubusercontent.com/egovernments/municipal-services/common-contract/docs/common-contract-v2-0-0.yml#/components/schemas/UserInfo'
      id:
        type: string
        readOnly: true
        description: The server generated unique ID(UUID).
        minLength: 2
        maxLength: 64
      tenantId:
        type: string
        description: Unique identifier of the tenant.
        minLength: 2
        maxLength: 64
      serviceCode:
        type: string
        description: Unique Code of the service defination (from service defination master)
        minLength: 2
        maxLength: 64
      serviceRequestId:
        type: string
        readOnly: true
        description: The unique formatted id for service request.
        minLength: 2
        maxLength: 128
      description:
        type: string
        description: Additional information or description of the service request
        minLength: 2
        maxLength: 256
      accountId:
        type: string
        description: userid of the user requesting the srervice - in our case it may be same as phone as we are using mobile number as the userid
        minLength: 2
        maxLength: 64
      additionalDetail:
        type: object
        description: This is the json object that will carry the actual input (whereever the metadata requries input). Structure should be same as the schema definition provided in the metadata of the service (schema compliance check to be performed at client/server)
      applicationStatus:
        type: string
        description: The current status of the service request.
        readOnly: true
      source:
        type: string
        description: 'Source mdms master data. Which captures the source of the service request(ex:- whatsapp, ivr, Swachhata etc)'
        minLength: 2
        maxLength: 64
        example: whatsapp, ivr etc
      
      address:
        $ref: 'https://raw.githubusercontent.com/egovernments/municipal-services/common-contract/docs/common-contract-v2-0-0.yml#/components/schemas/Address'
      auditDetails:
        $ref: 'https://raw.githubusercontent.com/egovernments/municipal-services/common-contract/docs/common-contract-v2-0-0.yml#/components/schemas/AuditDetails'
    required:
      - tenantId
      - serviceCode
  ServiceRequest:
    type: object
    description: Request object to fetch the report data
    properties:
      requestInfo:
        $ref: '#/definitions/RequestInfo'
      services:
        $ref: '#/definitions/Service'
      workflow:
        $ref: '#/definitions/Workflow'
    required:
      - RequestInfo
      - services
  ServiceResponse:
    type: object
    description: Response to the service request
    properties:
      responseInfo:
        $ref: '#/definitions/ResponseInfo'
      services:
        $ref: '#/definitions/Service'
      workflow:
        $ref: '#/definitions/Workflow'
    required:
      - ResponseInfo
      - services
  RequestInfo:
    type: object
    description: RequestHeader should be used to carry meta information about the requests
      to the server as described in the fields below. All eGov APIs will use
      requestHeader as a part of the request body to carry this meta
      information. Some of this information will be returned back from the
      server as part of the ResponseHeader in the response body to ensure
      correlation.
    properties:
      apiInfo:
        $ref: "#/components/schemas/APIInfo"
      deviceDetail:
        $ref: "#/components/schemas/DeviceDetail"
      ts:
        type: integer
        format: int64
        description: time in epoch
      action:
        type: string
        description: API action to be performed like _create, _update, _search (denoting
          POST, PUT, GET) or _oauth etc
        maxLength: 32
      key:
        type: string
        description: API key (API key provided to the caller in case of server to server
          communication)
        maxLength: 256
      msgId:
        type: string
        description: Unique request message id from the caller
        maxLength: 256
      requesterId:
        type: string
        description: UserId of the user calling
        maxLength: 256
      authToken:
        type: string
        description: //session/jwt/saml token/oauth token - the usual value that would go
          into HTTP bearer token
      userInfo:
        $ref: "#/components/schemas/UserInfo"
      correlationId:
        type: string
        readOnly: true
      signature:
        type: string
        description: Hash describing the current RequestHeader
    required:
      - apiId
      - ver
      - ts
      - msgId
      - action
  ResponseInfo:
    type: object
    readOnly: true
    description: ResponseHeader should be used to carry metadata information about the
      response from the server. apiId, ver and msgId in ResponseHeader should
      always correspond to the same values in respective request's
      RequestHeader.
    properties:
      ts:
        type: integer
        format: int64
        description: response time in epoch
      resMsgId:
        type: string
        description: unique response message id (UUID) - will usually be the correlation
          id from the server
        maxLength: 256
      msgId:
        type: string
        description: message id of the request
        maxLength: 256
      status:
        type: string
        description: status of request processing
        enum:
          - COMPLETED
          - ACCEPTED
          - FAILED
      signature:
        type: string
        description: Hash describing the current ResponseHeader
      error:
        type: object
        $ref: 
          "#/components/schemas/Error"
        description: Error detail from API
      information:
        type: object
        description: Additional information from API
      debug:
        type: object
        description: Debug information when requested 
      additionalInfo: 
        type: object
        description: Any additional information if required e.g. status url (to find out the current status of an asynchronous processing response), additional links to perform special functions like file
          uploads etc.
    required:
      - resMsgId
      - msgId
      - status