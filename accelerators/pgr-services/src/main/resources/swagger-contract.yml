openapi: 3.0.0
info:
  version: 1.0.0
  title: DIGIT Public Grievance Redressal(PGR) V2
  description: |
    ### API specs for PGR ###
    Application to Raise Grivances and track the progress.
    . It allows any citizen registered in the system to raise a complaint (based on the   Service definition provided in the master data, Please Refer MDMS service to        Service Definition master) for any ulb belonging to the state.
    . Notifications will be provided on progress of the complaint in evevry step.
    . Feedback can be provided by the citizen once the complint is resolved.
    . If not satisfied the citizen can reopen the complaint.
  contact:
    name: Egovernments Foundation
    email: contact@egovernments.org
x-module: BPA
x-common-path: 'https://raw.githubusercontent.com/egovernments/municipal-services/common-contract/docs/common-contract-v2-0-0.yml'
paths:
  /requests/_search:
    post:
      summary: Get service requests
      description: |
        Gets the list of service requests for a particular ULB based on search criteria.
      parameters:
      - $ref: 'https://raw.githubusercontent.com/egovernments/municipal-services/common-contract/docs/common-contract-v2-0-0.yml#/components/parameters/tenantId'
      - name: serviceCode
        in: query
        description: Allows search for service type - comma separated list
        schema:
          type: array
          items:
            type: string
            maxItems: 5
      - name: ids
        in: query
        description: Search by list of UUID
        schema:
          type: array
          items:
            type: string
            maxItems: 10
      - name: mobileNo
        in: query
        description: Search by mobile number of service requester
        schema:
          type: string
      - name: serviceRequestId
        in: query
        description: Search by serviceRequestId of the complaint
        schema:
          type: string
      - name: applicationStatus
        in: query
        description: Search by list of Application Status
        schema:
          type: array
          items:
            type: string
      responses:
        '202':
          description: Successful response sorted by reverse chrnological order of creation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceResponse'
        '400':
          description: Invalid input.
          content:
            '*/*':
              schema:
                $ref: 'https://raw.githubusercontent.com/egovernments/municipal-services/common-contract/docs/common-contract-v2-0-0.yml#/components/schemas/ErrorRes'
      tags:
      - Service Request
  /requests/_create:
    post:
      summary: Create service requests
      description: Create new service requests - supports batch -  please note that in case of errors entire batch is rejected
      tags:
      - Service Request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRequest'
        description: Request schema.
        required: true
      responses:
        '202':
          description: Application submitted successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceResponse'
        '400':
          description: Failed to process the application
          content:
            '*/*':
              schema:
                $ref: 'https://raw.githubusercontent.com/egovernments/municipal-services/common-contract/docs/common-contract-v2-0-0.yml#/components/schemas/ErrorRes'
  /requests/_update:
    post:
      summary: Update service requests
      description: Updates service request
      tags:
      - Service Request
      responses:
        '202':
          description: Application submitted successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ServiceResponse'
        '400':
          description: Failed to process the application
          content:
            '*/*':
              schema:
                $ref: 'https://raw.githubusercontent.com/egovernments/municipal-services/common-contract/docs/common-contract-v2-0-0.yml#/components/schemas/ErrorRes'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRequest'
        description: Request schema.
        required: true
components:
  schemas:
    PGREntity:
      type: object
      description: 'Top level wrapper object containing the Service and Workflow objects'
      properties:
        service:
          $ref: '#/components/schemas/Service'
        workflow:
          $ref: '#/components/schemas/Workflow'
      required:
      - service

    Workflow:
      type: object
      description: 'BPA application object to capture the details of land, land owners, and address of the land.'
      properties:
        action:
          type: string
          description: Action on the application in certain
          minLength: 1
          maxLength: 64
        assignes:
          type: array
          items:
            type: string
        comments:
          type: string
          description: Unique Identifier scrutinized number
          minLength: 1
          maxLength: 64
        varificationDocuments:
          description: Attach the workflow varification documents.
          type: array
          items:
            $ref: 'https://raw.githubusercontent.com/egovernments/municipal-services/common-contract/docs/common-contract-v2-0-0.yml#/components/schemas/Document'
    Status:
      title: Status
      enum:
      - ACTIVE
      - INACTIVE
      type: string
      description: status of the Property
    ServiceDef:
      type: object
      description: |

        This will be the MDMS data.

        Defines the structure of a service provided by the administration. This is based on Open311 standard, but extends it in follwoing important ways -

        1. metadata is changed from boolean to strign and represents a valid swgger 2.0 definition url of the metadata definition. If this is null then it is assumed taht service does not have any metadata, else the metadata is defined in the OpenAPI definition. This allows for a well structured powerful metadata definition.

        2. Due to this ServiceRequest object has been enhanced to include metadata values (aka attribute value in Open311) as an JSON object.
      properties:
        tenantId:
          type: string
          description: The unique identifier for Service - this is equivalent to jurisdiction_id in Open311. As the platform intends to be multi tenanted - this is always required
          minLength: 2
          maxLength: 50
        serviceCode:
          type: string
          description: The unique identifier for Service
          minLength: 2
          maxLength: 64
        tag:
          type: string
          description: 'tags for this service, we can provide multiple keywords as dot(.) seprated.'
        group:
          type: string
          description: This field we will use to capture department.
        slaHours:
          type: number
          description: Service Level Agreement in hours for Service.
      required:
      - tenantId
      - serviceCode
    Service:
      type: object
      description: |
        Instance of Service request raised for a particular service. As per extension propsed in the Service definition "attributes" carry the input values requried by metadata definition in the structure as described by the corresponding schema.

        * Any one of 'address' or '(lat and lang)' or 'addressid' is mandatory
      properties:
        citizen:
          $ref: 'https://raw.githubusercontent.com/egovernments/municipal-services/common-contract/docs/common-contract-v2-0-0.yml#/components/schemas/UserInfo'
        id:
          type: string
          readOnly: true
          description: The server generated unique ID(UUID).
          minLength: 2
          maxLength: 64
        tenantId:
          type: string
          description: Unique identifier of the tenant.
          minLength: 2
          maxLength: 64
        serviceCode:
          type: string
          description: Unique Code of the service defination (from service defination master)
          minLength: 2
          maxLength: 64
        serviceRequestId:
          type: string
          readOnly: true
          description: The unique formatted id for service request.
          minLength: 2
          maxLength: 128
        description:
          type: string
          description: Additional information or description of the service request
          minLength: 2
          maxLength: 256
        accountId:
          type: string
          description: userid of the user requesting the srervice - in our case it may be same as phone as we are using mobile number as the userid
          minLength: 2
          maxLength: 64
        additionalDetail:
          type: object
          description: This is the json object that will carry the actual input (whereever the metadata requries input). Structure should be same as the schema definition provided in the metadata of the service (schema compliance check to be performed at client/server)
        applicationStatus:
          type: string
          description: The current status of the service request.
          readOnly: true
        source:
          type: string
          description: 'Source mdms master data. Which captures the source of the service request(ex:- whatsapp, ivr, Swachhata etc)'
          minLength: 2
          maxLength: 64
          example: whatsapp, ivr etc

        address:
          $ref: 'https://raw.githubusercontent.com/egovernments/municipal-services/common-contract/docs/common-contract-v2-0-0.yml#/components/schemas/Address'
        auditDetails:
          $ref: 'https://raw.githubusercontent.com/egovernments/municipal-services/common-contract/docs/common-contract-v2-0-0.yml#/components/schemas/AuditDetails'
      required:
      - tenantId
      - serviceCode
    ServiceRequest:
      type: object
      description: Request object to fetch the report data
      properties:
        requestInfo:
          $ref: 'https://raw.githubusercontent.com/egovernments/municipal-services/common-contract/docs/common-contract-v2-0-0.yml#/components/schemas/RequestHeader'
        pgrEntity:
          $ref: '#/components/schemas/ServiceWrapper'
      required:
      - RequestInfo
      - pgrEntity
    ServiceResponse:
      type: object
      description: Response to the service request
      properties:
        responseInfo:
          $ref: 'https://raw.githubusercontent.com/egovernments/municipal-services/common-contract/docs/common-contract-v2-0-0.yml#/components/schemas/ResponseInfo'
        PGREntities:
          type: array
          items:
            $ref: '#/components/schemas/ServiceWrapper'
      required:
      - ResponseInfo
      - pgrEntity