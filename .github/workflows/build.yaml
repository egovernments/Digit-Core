name: Build Pipeline

on:
  push:
    branches:
      - docker-arm-update
      - master
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to build from'
        required: true
        type: string
      service_folder:
        description: 'Folder prefix for the service (e.g., core-services or business-services)'
        required: true
        type: string
      service:
        description: 'Name of the service to build and deploy'
        required: true
        type: string

env:
  DOCKER_USERNAME: ${{ vars.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_ACCESS_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ "${{ github.event.inputs.service }}" ]
    outputs:
      docker_image: ${{ steps.save_docker_image.outputs.docker_image }}
      db_image: ${{ steps.save_db_image.outputs.db_image }}
    steps:
      - name: Checkout Code from selected branch
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3  

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.service }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Generate the Next Tag
        id: tag
        run: |
          BRANCH=${{ github.event.inputs.branch }}
          COMMIT_HASH=$(git rev-parse --short HEAD)
          SERVICE_NAME=${{ matrix.service }}

          TOKEN=$(curl -s -X POST "https://hub.docker.com/v2/users/login/" \
            -H "Content-Type: application/json" \
            -d '{"username": "'$DOCKER_USERNAME'", "password": "'$DOCKER_PASSWORD'"}' | jq -r .token)

          REPO_CHECK=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: JWT $TOKEN" \
            "https://hub.docker.com/v2/repositories/$DOCKER_USERNAME/$SERVICE_NAME/")

          if [ "$REPO_CHECK" -ne 200 ]; then
            NEXT_TAG="${BRANCH}-${COMMIT_HASH}"
          else
            EXISTING_TAGS=$(curl -s -H "Authorization: JWT $TOKEN" \
              "https://hub.docker.com/v2/repositories/$DOCKER_USERNAME/$SERVICE_NAME/tags?page_size=100" | jq -r '.results[].name')

            LATEST_TAG=$(echo "$EXISTING_TAGS" | grep "^${BRANCH}-${COMMIT_HASH}" | sort -V )
            if [ -z "$LATEST_TAG" ]; then
              NEXT_TAG="${BRANCH}-${COMMIT_HASH}"
            fi
          fi

          echo "::set-output name=tag::$NEXT_TAG"
          echo "NEXT_TAG=$NEXT_TAG" >> $GITHUB_ENV

      - name: Build and Push Application Docker Image
        id: build_push_docker
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64,linux/arm64
          context: .
          file: build/maven/Dockerfile
          push: true
          tags: |
            ${{ vars.DOCKER_USERNAME }}/${{ matrix.service }}:${{ steps.tag.outputs.tag }}
          build-args: |
            WORK_DIR=${{ github.event.inputs.service_folder }}/${{ matrix.service }}

      - name: Check if DB folder exists
        id: check-db-folder
        run: |
          FOLDER_PATH="${{ github.event.inputs.service_folder }}/${{ matrix.service }}/src/main/resources/db"
          if [ -d "$FOLDER_PATH" ]; then
            echo "folder_exists=true" >> $GITHUB_OUTPUT
          else
            echo "folder_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build and Push Database Docker Image
        if: ${{ steps.check-db-folder.outputs.folder_exists == 'true' }}
        id: build_push_db_docker
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64,linux/arm64
          context: ${{ github.event.inputs.service_folder }}/${{ matrix.service }}/src/main/resources/db
          file: ${{ github.event.inputs.service_folder }}/${{ matrix.service }}/src/main/resources/db/Dockerfile
          push: true
          tags: |
            ${{ vars.DOCKER_USERNAME }}/${{ matrix.service }}-db:${{ steps.tag.outputs.tag }}

      - name: Save Application Docker Image
        id: save_docker_image
        run: |
          DOCKER="$DOCKER_USERNAME/${{ matrix.service }}:${{ steps.tag.outputs.tag }}"
          echo "docker_image=$DOCKER" >> "$GITHUB_OUTPUT"

      - name: Save Database Docker Image
        id: save_db_image
        if: ${{ steps.check-db-folder.outputs.folder_exists == 'true' }}
        run: |
          DB="$DOCKER_USERNAME/${{ matrix.service }}-db:${{ steps.tag.outputs.tag }}"
          echo "db_image=$DB" >> "$GITHUB_OUTPUT"
